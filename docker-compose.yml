services:
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis_network

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Web console
    volumes:
      - minio_data:/data
    networks:
      - minio_network

  mc:
    image: minio/mc:latest
    container_name: mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        sleep 5 &&
        mc alias set myminio http://${S3_HOST}:${S3_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
        mc admin user add myminio ${S3_ACCESS_KEY} ${S3_SECRET_KEY} &&
        mc admin policy attach myminio readwrite --user ${S3_ACCESS_KEY} &&
        mc mb myminio/${S3_BUCKET} || true &&
        echo 'MinIO user and bucket created: ${S3_BUCKET} (${S3_ACCESS_KEY})' &&
        tail -f /dev/null
      "
    tty: true
    networks:
      - minio_network

  postgres:
    image: postgres
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_PASSWORD: ${PSQL_PASSWORD}
      POSTGRES_DB: ${PSQL_DB}
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pg_network

  gateway:
    build:
      dockerfile: Dockerfile
      context: ./gateway
    container_name: gateway
    env_file:
      - .env.docker
    ports:
      - "8080:8080"
    networks:
      - pg_network
      - redis_network
      - minio_network
      - rabbit_network
    depends_on:
      - postgres
      - redis
      - minio
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - rabbit_network

networks:
  rabbit_network:
    driver: bridge
  pg_network:
    driver: bridge
  minio_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  rabbitmq_data: